HOST: https://orchestrator-2.keboola.com

--- Keboola Orchestrator v2 API ---

---

Orchestrator is responsible for jobs scheduling, execution and monitoring.

Main concepts of Orchestrator are `Orchestrations` and `Jobs`.

`Orchestration` tells you **what** should be executed and **when** it should be executed,
 what is specified with simple list of tasks represented by URLS (external API calls) and when is specified with crontab record syntax.

`Job` represents a single execution of one orchestration - it is create either by scheduler or manually by Orchestrator API. 
Logs and status informations are attached to Jobs, jobs are never deleted and can be accessed by API.
Job is is composed of multiple tasks, each task is one call to some external API which compiles with http://docs.keboolaconnector.apiary.io/, tasks are executed one by one. Whe one task fails whole orchestration
end up with error and possible next tasks aren't executed. Registered Storage API token is propagated to all defined tasks.


Orchestrator is composed by:

 - **Scheduler** - creates and enqueues jobs for processing from registered orchestrations based on their timing information
 - **Runner** - executes jobs from queue


# HTTP Headers

All requests should accept these headers:

* *X-StorageApi-Token*  - storage api token used for authentification


---


--
Orchestrations
--

Orchestrator registration

Orchestration will be registered and used token will saved together with configuration!
Create individual token for each orchestration is recommended.

### configuration
Orchestration configuration must be prepared before its registration.
Configuration is stored in Storage API table and consists of list of tasks which will be executed one by one.

#### Required configuration table columns

    "id","runUrl","runParameters"

* **id** - row identificator (table's primary key) - allows partial modifications of rows - you can choose whatever you want, 
* **runUrl** - direct url to run the component. Component should compile with http://docs.keboolaconnector.apiary.io/. Request is called with orchestration Storage API token in `X-StorageApi-Token` header.
* **runParameters**  - optional parameters for runUrl in JSON format

#### Configuratiom table attributes

* **notificationsEmail** - (optional) When orchestration job execution fail, notification will be sent to specified email. One or more **comma separated** addresses can be set.



### Parameters

* **name** - (optional) Orchestrator name (configurationId will be used if not set)
* **configurationId** - configuration table id
* **crontabRecord** - execution schedule in [crontab format](http://en.wikipedia.org/wiki/Cron#Predefined_scheduling_definitions). Note that times should be in UTC.
POST /orchestrations
> Content-Type: application/json
{
    "name": "Main orchestrator",
    "configurationId": "sys.c-orchestrators.main-orchestrator",
    "crontabRecord": "0 * * * *"
}
< 201
< Content-Type: application/json
{
    "id": 2362,
    "name": "Main orchestrator",
    "configurationId": "sys.c-orchestrators.main-orchestrator",
    "crontabRecord": "0 * * * *",
    "createdTime": "2013-03-02T11:11:24+01:00",
    "lastScheduledTime": null,
    "active": true,
    "token": {
        "id":1661,
    	"description": "Orchestrator token"
    }
}


Update orchestration
PUT /orchestrations/2362
> Content-Type: application/json
{
   "active": false
}
< 201
< Content-Type: application/json
{
    "id": 2362,
    "name": "Main orchestrator",
    "configurationId": "sys.c-orchestrators.main-orchestrator",
    "crontabRecord": "0 * * * *",
    "createdTime": "2013-03-02T11:11:24+01:00",
    "lastScheduledTime": null,
    "active": false,
    "token": {
		"id":1661,
		"description": "Orchestrator token"
	}
}


Get registered orchestrations
GET /orchestrations
< 200
< Content-Type: application/json
[
    {
        "id": 2362,
        "name": "Main orchestrator",
        "configurationId": "sys.c-orchestrators.main-orchestrator",
        "crontabRecord": "0 * * * *",
        "createdTime": "2013-03-02T11:11:24+01:00",
        "lastScheduledTime": null,
        "active": true,
        "token": {
			"id":1661,
			"description": "Orchestrator token"
		}
    }
]

Delete orchestration
DELETE /orchestrations/{orchestrationId}
< 204

--
Jobs 
Each orchestration execution is represented by job.

### Job lifetime

* Job is created (By scheduler or manually threw the API). It's status is `waiting`, job is waiting in processing queue.
* Job is fetched from queue by worker. It's status is changed to `processing`.
* Job execution is done, job is deleted from queue. It's status is changed to `error` or `success` depending on job tasks results.

### Job structure

* *id* - job id
* *orchestrationId* - id of parent orchestration
* *tokenId* - id of used token
* *status* - job status, one of `scheduled`, `waiting`, `processing`, `error`, `success`
* *runId* - run identificator for logging associated to job
* *createdTime* - creation time of job
* *startTime* - time of job execution start
* *finishedTime* - time of job execution end
* *initializedBy* - how the job was created, it could be crated `manually` or by `scheduler`
* *results* - informations about job execution
--


List orchestration jobs
GET /orchestrations/{orchestrationId}/jobs
< 200
[
    {
        "id": 2364,
        "orchestrationId": 2362,
        "createdTime": "2013-03-02T11:20:38+01:00",
        "startTime": null,
        "endTime": null,
        "token": {
           	"id":1661,
           	"description": "Orchestrator token"
        },
        "status": "waiting",
        "initializedBy": "manually",
        "results": null
}
]


Get orchestration job
GET /jobs/{jobId}
< 200
< Content-type: application/json
{
    "id": 2364,
    "orchestrationId": 2362,
    "createdTime": "2013-03-02T11:20:38+01:00",
    "startTime": null,
    "endTime": null,
    "token": {
		"id":1661,
		"description": "Orchestrator token"
	},
    "status": "waiting",
    "initializedBy": "manually",
    "results": null
}

Manualy execute orchestration

Creates new job for orchstration, job processing should be started immediatelly.
You can then monitor job status by polling job resource.


POST /orchestrations/{orchestrationId}/jobs
< 201
< Content-type: application/json
{
    "id": 2366,
    "orchestrationId": 2362,
    "createdTime": "2013-03-02T11:23:21+01:00",
    "startTime": null,
    "endTime": null,
    "token": {
		"id":1661,
		"description": "Orchestrator token"
	},
    "status": "waiting",
    "initializedBy": "manually",
    "results": null
}


Cancel orchestration job

Only waiting job can be canceled.

DELETE /jobs/{jobId}
< 204



